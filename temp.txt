
  <p>where "path_to_file" is the folder path where the .elf files are contained. You should see some output on the 4 terminals.</p>
</section>

  <section class="bs-docs-section">
  <h1 id="pages" class="page-header">Pages</h2>
  <p>
    The main page is the <code>index.html</code> file. You can also add additional pages by creating <code>.html</code>
    files in the root folder or in any sub-folder. Each page file must begins with a template declaration:
  </p>

<!-- @formatter:off -->
{% highlight html %}
---
layout: default
title: Home
description: Simple documentation template for Github pages
---

<!-- content -->
{% endhighlight %}
<!-- @formatter:on -->

  <p>
    Set <code>isHome</code> to <code>true</code> on the main page file, the homepage will have a bigger header with a
    central download button.
  </p>

<!-- @formatter:off -->
{% highlight html %}
---
..........
isHome: true
---
{% endhighlight %}
<!-- @formatter:on -->

  <p>
    Set <code>hide</code> to <code>true</code> to hide a page from the main menu, the page will still be accessible
    with direct link. <a href="hidden.html">Example</a>.
  </p>

<!-- @formatter:off -->
{% highlight html %}
---
..........
hide: true
---
{% endhighlight %}
<!-- @formatter:on -->

  <h2 id="titles">Titles</h2>
  <p>In order to get the right menu automatically generated you must respect some conventions.</p>

<!-- @formatter:off -->
{% highlight html %}
<!-- wrap each main section with "bs-docs-section" class -->
<section class="bs-docs-section">
  <!-- each section must contain ONE h1 with an id and optionally a "page-header" class -->
  <h1 id="first-level" class="page-header">First level</h1>

  <!-- you can optionally declare sub-sections with h2/h3 with an id -->
  <h2 id="sub-section">Second level</h2>

  <h3 id="another-sub-section">Still second level</h3>
</section>
{% endhighlight %}
<!-- @formatter:on -->

  <p>
    If you want an <code>&lt;h1-3&gt;</code> with an <code>id</code> but not visible in the menu, add a
    <code>data-no-menu</code> attribute to it.
  </p>

  <!-- @formatter:off -->
{% highlight html %}
<h2 id="my-id" data-no-menu>Title</h2>
{% endhighlight %}
<!-- @formatter:on -->

  <h2 id="anchors">Anchors</h2>
  <p>
    A paragraph (ยง) link is added next to every <code>&lt;h1-5&gt;</code> with an <code>id</code> attribute in order
    to easily right-click and copy the link to a particular section. The link is visible when hovering the title.
  </p>

  <h2 id="highlight">Syntax highlight</h2>
  <p>
    The powerful Pygments highlighter is activated on the template, just wrap your unescaped source code with the
    <code>{{ "{% highlight ... " }}%}</code> directive.
  </p>

<!-- @formatter:off -->
{% highlight text %}
{{ "{% highlight html " }}%}
<div>Some <b>HTML</b></div>
{{ "{% endhighlight " }}%}

{{ "{% highlight javascript " }}%}
alert('Some javascript');
{{ "{% endhighlight " }}%}
{% endhighlight %}
<!-- @formatter:on -->

  <h2 id="resources">Resources &amp; links</h2>
  <p>
    If you need to create internal links between your pages, or include resources (JS &amp; CSS), always start your
    URLs with <code>{{ "{{site.github.url" }}}}</code>.
  </p>

  <!-- @formatter:off -->
{% highlight html %}
<script src="{{ "{{site.github.url" }}}}/dist/my-script.js"></script>

<a href="{{ "{{site.github.url" }}}}/about/index.html">About</a>
{% endhighlight %}
<!-- @formatter:on -->

  <h2 id="bootbox">Bootbox</h2>
  <p>
    <a href="http://bootboxjs.com/">Bootbox</a> is installed with a syntax sugar to easily create pop-in content.
    To use this sugar you must create a clickable element with a <code>data-bootbox</code> attribute and an hidden
    content holder with a corresponding <code>id</code> attribute.
  </p>

  <!-- @formatter:off -->
{% highlight html %}
<button class="btn btn-primary btn-xs" data-bootbox="my-content">Button title</button>

<div id="my-content" class="hidden" title="Pop-in title">
  Pop-in content
</div>
{% endhighlight %}
  <!-- @formatter:on -->

  <h2 id="gems">Plugins</h2>
  <p>
    All available Jekyll plugins are installed by default, you can remove them by modifying the <code>gems</code>
    parameter in <code>_config.yml</code>. See the documentation on
    <a href="https://help.github.com/articles/using-jekyll-plugins-with-github-pages/">GitHub Help</a> pages.
  </p>

  <h2 id="bower">Bower</h2>
  <p>
    Feel free to use the <code>bower.json</code> to manage your front dependencies. Bower packages are added the
    <code>dist</code> directory and <b>MUST</b> be pushed to the repository. jQuery and Bootstrap are ignored by
    <code>.gitignore</code> as already loaded from a CDN.
  </p>
